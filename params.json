{"name":"Reguljära uttryck i Open Refine","tagline":"En tutorial av Jens Finnäs från Journalism++ Stockholm.","body":"__Reguljära uttryck__ (regular expression, regex, regexp) är en syntax för att göra __avancerade mönstersökningar i textsträngar__. Vi kan till exempel söka efter alla personnummer, webbadresser, akademiska titlar och så vidare. Reguljära uttyck går att tillämpa i de flesta programmeringsspråk.\r\n\r\n\r\n### Definiera tecken på regex-språk\r\n<table>\r\n\t<tr><td><code>^</code></td><td>Början av en sträng</td></tr>\r\n\t<tr><td><code>$</code></td><td>Slutet av en sträng</td></tr>\r\n\t<tr><td><code>.</code></td><td>Vilket tecken som helst</td></tr>\r\n\t<tr><td><code>[ ]</code></td><td>Matchar något av tecknen inom klammern. Till exempel <code>[aoueiyåäö]</code> matchar en vokal.</td></tr>\r\n\t<tr><td><code>\\s</code></td><td>Mellanslag</td></tr>\r\n\t<tr><td><code>\\S</code></td><td>Icke-mellanslag</td></tr>\r\n\t<tr><td><code>\\d</code></td><td>Siffra</td></tr>\r\n\t<tr><td><code>\\D</code></td><td>Icke-siffra</td></tr>\r\n\r\n</table>\r\n\r\n### Definiera antal tecken \r\n<table>\r\n\t<tr><td><code>*</code></td><td>Hur många tecken som helst av föregående.</td></tr>\r\n\t<tr><td><code>{3}</code></td><td>Matchar exakt tre tecken. </td></tr>\r\n\t<tr><td><code>{3,5}</code></td><td>Matchar exakt tre-fem tecken. </td></tr>\r\n\t<tr><td><code>{3,}</code></td><td>Matchar tre tecken eller fler. </td></tr>\r\n</table>\r\n\r\n__Komplett lista över funktioner:__ http://www.tutorialspoint.com/python/python_reg_expressions.htm\r\n\r\n### Exempel\r\n<table>\r\n\t<tr><td>Sök årtal</td><td><code>\\d\\d\\d\\d</code></td></tr>\r\n\t<tr><td>Sök partiförkortningar</td><td><code>\\([A-Z]\\)</code></td></tr>\r\n</table>\r\n\r\n### Övning: \r\n![Pythex](http://jensfinnas.github.io/refine-regex-tutorial/images/01pythex.png)\r\nGå till https://pythex.org/\r\nKlistra in texten från http://jensfinnas.github.io/refine-regex-tutorial/tweets.txt\r\n\r\n- Hur många gånger nämns \"Jimmie\"?\r\n- Hitta alla hashtaggar.\r\n- Hitta alla url:ar (http://).\r\n\r\n\r\n# Open Refine\r\nOpen Refine (som tidigare hette Google Refine) är att gratisverktyg för att __tvätta och bearbeta data__. Med Open Refine kan du bland annat:\r\n- Identifiera och harmonisera __stavningsvariationer__ (till exempel \"Ericsson Ab\", \"Ericsson\", \"Ericson\" => \"Ericsson\")\r\n- Använda externa API:er för att komplettera ditt dataset. Till exempel genom att anropa en __geokodare__ som gör om adresser till longituder och latituder.\r\n- Köra __reguljära uttryck__.\r\n- Jobba med __stora mängder data__.\r\n\r\nOpen Refine är framför allt användbart när man jobbar med __textdata__. Om du har numerisk data och vill göra beräkningar är det vanligen enklare att använda Excel eller något annat kalkylprogram.\r\n\r\nVarje databearbetning i Refine består av två steg:\r\n1) Välj vilken dela av datan du vill jobba med genom att applicera ett __facet__ (filter).\r\n2) Applicera en funktion (ofta genom att klicka på en kolumnrubrik och välj __Edit column__).\r\n\r\n### Importera data\r\nÖppna Open Refine, välj <code>Create Project > Web Addresses (URLs)</code> och klistra in följande url: <code>http://jensfinnas.github.io/refine-regex-tutorial/data/anföranden_2013-2014.xml</code>.\r\n![Välj fil](http://jensfinnas.github.io/refine-regex-tutorial/images/02xml.png)\r\n__Källa:__ http://data.riksdagen.se/Data/Anforanden/\r\n![Granska data](http://jensfinnas.github.io/refine-regex-tutorial/images/03import.png)\r\n\r\n\r\n### Formatera datum korrekt\r\nKlicka på kolumnen __anforande - dok_datum__ och välj sedan  __Edit column > Add column based on this column__.\r\n![Formatera datum korrekt](http://jensfinnas.github.io/refine-regex-tutorial/images/04parsedate.png)\r\n\r\nApplicera följande kod: <code>value.toDate()</code>.\r\n\r\nVi kan nu filtrera på datum. Klicka på den nya kolumnen __Datum__ (eller vad du valde att kalla den) och välj __Facet > Timeline facet__.\r\n![Filtrera på datum](http://jensfinnas.github.io/refine-regex-tutorial/images/05filterdate.png)\r\n\r\n### Filtrera på ett parti eller annan kategori\r\nKlicka på __anforande - parti__ och välj __Facet > Text facet__.\r\n![Filtrera på parti](http://jensfinnas.github.io/refine-regex-tutorial/images/06filterparty.png)\r\n\r\nVi kan nu välja att endast visa anföranden från ett visst parti från en viss tid.\r\n\r\n### Reguljära uttryck\r\nSe till att du inte har några aktiva facets. Klicka på __anforande - anforandetext__ och välj __Edit column > Add column based on this column__. Applicera följande kod. Välj __Jython__ som språk den här gången.\r\n\r\n![Skriv regex](http://jensfinnas.github.io/refine-regex-tutorial/images/07regex.png)\r\n\r\n<pre><code>import re\r\nreturn re.search(\"([Ll]andsbygd)\",value).group(0)\r\n</code></pre>\r\nVi har nu skapat en ny kolumn som innehåller ordet \"landsbygd\" eller \"Landsbygd\" om det ingick i anförandet. Vi kan nu applicera ett __text facet__ på den här kolumnen och på partikolumnen för att se vilka partier som använder det här ordet mest.\r\n\r\n![Partifilter](http://jensfinnas.github.io/refine-regex-tutorial/images/08regexfilter.png)\r\n\r\nHär är ett exempel på ett lite mera avancerat reguljärt uttryck.\r\n<pre><code>import re\r\nreturn re.search(\"^(\\S{3,4}) talman\",value).group(1)\r\n</code></pre>\r\n\r\nHär söker vi efter\r\n1. <code>~</code> början på en rad\r\n2. <code>\\S{3,4}</code> tre eller fyra tecken som inte är mellanslag.\r\n3. <code> talman</code> följt av mellanslag talman.\r\n4. <code>()</code> anger att det är bara ordet inom parentesen som vi vill fånga in.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}